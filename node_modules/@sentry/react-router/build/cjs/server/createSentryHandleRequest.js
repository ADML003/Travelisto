Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const React = require('react');
const wrapSentryHandleRequest = require('./wrapSentryHandleRequest.js');
const stream = require('stream');

/**
 * A complete Sentry-instrumented handleRequest implementation that handles both
 * route parametrization and trace meta tag injection.
 *
 * @param options Configuration options
 * @returns A Sentry-instrumented handleRequest function
 */
function createSentryHandleRequest(
  options,
)

 {
  const {
    streamTimeout = 10000,
    renderToPipeableStream,
    ServerRouter,
    createReadableStreamFromReadable,
    botRegex = /bot|crawler|spider|googlebot|chrome-lighthouse|baidu|bing|google|yahoo|lighthouse/i,
  } = options;

  const handleRequest = function handleRequest(
    request,
    responseStatusCode,
    responseHeaders,
    routerContext,
    _loadContext,
  ) {
    return new Promise((resolve, reject) => {
      let shellRendered = false;
      const userAgent = request.headers.get('user-agent');

      // Determine if we should use onAllReady or onShellReady
      const isBot = typeof userAgent === 'string' && botRegex.test(userAgent);
      const isSpaMode = !!(routerContext ).isSpaMode;

      const readyOption = isBot || isSpaMode ? 'onAllReady' : 'onShellReady';

      const { pipe, abort } = renderToPipeableStream(React.default.createElement(ServerRouter, { context: routerContext, url: request.url,} ), {
        [readyOption]() {
          shellRendered = true;
          const body = new stream.PassThrough();

          const stream$1 = createReadableStreamFromReadable(body);

          responseHeaders.set('Content-Type', 'text/html');

          resolve(
            new Response(stream$1, {
              headers: responseHeaders,
              status: responseStatusCode,
            }),
          );

          // this injects trace data to the HTML head
          pipe(wrapSentryHandleRequest.getMetaTagTransformer(body));
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          // eslint-disable-next-line no-param-reassign
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            // eslint-disable-next-line no-console
            console.error(error);
          }
        },
      });

      // Abort the rendering stream after the `streamTimeout`
      setTimeout(abort, streamTimeout);
    });
  };

  // Wrap the handle request function for request parametrization
  return wrapSentryHandleRequest.wrapSentryHandleRequest(handleRequest);
}

exports.createSentryHandleRequest = createSentryHandleRequest;
//# sourceMappingURL=createSentryHandleRequest.js.map
